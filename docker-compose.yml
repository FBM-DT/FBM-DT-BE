version: '3.5'

services:
  db:
    image: postgres:14
    restart: always
    env_file:
      - .env
    environment:
      - POSTGRES_PASSWORD=${DB_PASS}
      - POSTGRES_USER=${DB_USER}
      - POSTGRES_DB=${DB_NAME}
    container_name: postgres
    volumes:
      - ./pgdata:/var/lib/postgresql/data
    ports:
      - '5432:5432'

  # development-app:
  #   build:
  #     context: .
  #     dockerfile: Dockerfile
  #     target: development
  #   env_file:
  #     - .env
  #   container_name: nestjs-app
  #   environment:
  #     - PORT:${PORT}
  #   command: npm run start:dev
  #   ports:
  #     - '3000:3000'
  #   depends_on:
  #     - db
  #   volumes:
  #     - .:/backend/dt/app # host:guest
      
  pgadmin:
    image: dpage/pgadmin4
    restart: always
    container_name: pgadmin4
    # target: development
    environment:
      - PGADMIN_DEFAULT_EMAIL=admin@admin.com
      - PGADMIN_DEFAULT_PASSWORD=pgadmin4
    ports:
      - '5050:80'
    depends_on:
      - db
  
  dev:
    container_name: nestjs_api_dev
    image: nestjs-api-dev:1.0.0
    build:
      context: .
      target: development
      dockerfile: ./Dockerfile
    command: npm run start:dev
    ports:
      - 3000:3000
    # networks:
    #   - nesjs-network
    depends_on:
      - db
    volumes:
      - .:/backend/dt/app 
      - /backend/dt/app/node_modules
    restart: unless-stopped

  prod:
    container_name: nestjs_api_prod
    image: nestjs-api-prod:1.0.0
    build:
      context: .
      target: production
      dockerfile: ./Dockerfile
    command: npm run start:prod
    ports:
      - 3000:3000
    # networks:
    #   - nesjs-network
    volumes:
      - .:/backend/dt/app 
      - /backend/dt/app/node_modules
    restart: unless-stopped

# networks:
#   nesjs-network:
# networks:
#   app-network:
#     driver: bridge